package core

import (
	"bufio"
	"bytes"
	"fmt"
	"io/ioutil"
	"strings"

	"github.com/acarl005/stripansi"
	"github.com/alecthomas/chroma/lexers"
	"github.com/alecthomas/chroma/quick"
	"github.com/logrusorgru/aurora/v3"
)

type lineError struct {
	content string
	line    int
	span    []int
}

// The following represent all possible errors generated by Vale. They are
// split into three groups:
//
// 100-level: Unexpected errors (such as filesystem failures).
//
// 200-level: User-introduced errors (such as bad configuration).
//
// 300-level: Environment errors (such as missing dependencies).
var (
	// E200 indicates that the user has not created a configuration file
	// (`.vale.ini`) in a discoverable location.
	E200 = NewError(
		"E200",
		"Unable to locate a configuration file.",
		"See https://docs.errata.ai/vale/config#search-process for more information.")
)

func annotate(file []byte, target string) (lineError, error) {
	var sb strings.Builder

	scanner := bufio.NewScanner(bytes.NewBuffer(file))
	context := lineError{}

	idx := 1
	for scanner.Scan() {
		markup := scanner.Text()
		plain := stripansi.Strip(markup)
		if strings.Contains(plain, target) {
			context.line = idx

			s := strings.Index(plain, target) + 1
			context.span = []int{s, s + len(target)}

			sb.WriteString(
				fmt.Sprintf("\033[1;32m%4d\033[0m* %s\n", idx, markup))
		} else {
			sb.WriteString(
				fmt.Sprintf("\033[1;32m%4d\033[0m  %s\n", idx, markup))
		}
		idx++
	}

	if err := scanner.Err(); err != nil {
		return lineError{}, err
	}

	context.content = sb.String()
	return context, nil
}

// NewError creates a colored error from the given information.
//
// The standard format is
//
// ```
// <code> [<context>] <title>
//
// <msg>
// ```
func NewError(code, title, msg string) error {
	return fmt.Errorf(
		"%s %s\n\n%s",
		aurora.BgRed(code),
		title,
		msg)
}

// NewE100 creates a new, formatted "unexpected" error.
//
// Since E100 errors can occur anywhere, we include a "context" that makes it
// clear where exactly the error was generated.
func NewE100(context string, err error) error {
	title := fmt.Sprintf("[%s] %s", context, "Runtime error")
	return NewError("E100", title, err.Error())
}

// NewE201 creates a formatted user-generated error.
//
// 201 errors involve a specific configuration asset and should contain
// parsable location information on their last line of the form:
//
// <path>:<line>:<start>:<end>
func NewE201(msg, value, file string) error {
	var sb bytes.Buffer

	f, err := ioutil.ReadFile(file)
	if err != nil {
		return NewE100("NewE201/ReadFile", err)
	}

	lexer := lexers.Match(file)
	err = quick.Highlight(
		&sb,
		string(f),
		lexer.Config().Name,
		"terminal256",
		"monokai")

	if err != nil {
		return NewE100("NewE201/Highlight", err)
	}

	ctx, err := annotate(sb.Bytes(), value)
	if err != nil {
		return NewE100("NewE201/annotate", err)
	}

	return NewError(
		"E201",
		fmt.Sprintf("Invalid value provided [%d:%d]:", ctx.line, ctx.span[0]),
		fmt.Sprintf("%s\n%s", ctx.content, msg))
}
